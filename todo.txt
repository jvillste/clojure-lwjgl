graphics primitive list
- creates and updates GPU buffers based on a list of primitives such as triangles and bitmaps

view-function
- model -> graphics primitive list

graphics primitive list manager
- maintians ordered list of primitive lists based on id:s

model listening
- decides what view functions need to be evaluated based on a certain change in the model

event handling
- function from model and event to new model

widget hierarchy
- widgets can produce events based on input events and events produced by other widgets
- each widget has it's own model that needs to be containted in the upper level widget's model

layout
- layout events or measure/layout passess


framework should be minimized and library maximized



everything is just composable functions

component state is function of application state
visual elements are functions of component state
styles are functions of visual elements
event handlers are functions over input state, visual elements, component state and application state
layouts are functions over visuals
animations are functions over visuals and time


component state = data binding(application state)
component state = event handlers(input state, component state)
visual elements = template(component state)
visual elements = style(visual elements)
visual elements = layout(visual elements)
visual elements = animations(visual elements, time)

(-> application-and-input-state
  (create-components)
  (create-visuals (templates))
  (apply-styles (styles))
  (measure-layout (is-layout-expired))
  (layout (is-layout-expired))
  (tweening)
  (update-quad-tree)
  (draw))






every application can have different set of components, visual elements, layouts, styles and animations. 



component

visual

visual list


(component/get-visuals




gui architectures
----------------------

Microsoft MVC
-------------

(defn todo-list-view [model]
  (:form
    (for [todo-item <- (:todo-items model)]
      (text-box :value todo-item))
    (button :submit-to "/home/save-changes"
            :text "save changes"))

(defn todo-list-action []
  (view {:todo-items (get-todo-items-from-database))))

(defn save-changes-action [view]
  (save-todo-list-to-database (map :value (text-boxes view)))
  (redirect "home/todo-list"))


Swing
-------------


(defn create-view [model]
  (doseq
    (for [todo-item <- (:todo-items model)]
      (let [text-box (text-box/create @(:value todo-item))]
         (observable/add-observer (:value-changed text-box)
                                  (fn [text-box] (reset! (:value todo-item) @(:value text-box))))))))

Ideal
------

(defn view [model]
  (for [string <- (:strings model)]
    (text-box string)))

(defn model []
      {:strings }
      )
